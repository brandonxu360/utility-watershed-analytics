# PRODUCTION COMPOSE CONFIG
services:

  # Frontend build container - builds static files to shared volume
  frontend-build:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    volumes:
      - frontend-build:/app/client/dist
    profiles:
      - build

  # Data downloader service - downloads watershed data files
  data-downloader:
    build:
      context: .
      dockerfile: Dockerfile.data-downloader
    volumes:
      - watershed_data:/data
    environment:
      - DATA_OUTPUT_DIR=/data
    profiles:
      - data-management

  # Backend Django server
  server:
    build:
      context: ./server
      target: production
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - watershed_data:/app/server/watershed/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PW=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=False
    entrypoint: ["/entrypoint.sh"]
    command: gunicorn server.wsgi:application --bind 0.0.0.0:8000
    depends_on:
      db:
        condition: service_healthy

  # PostgreSQL database with PostGIS
  db:
    image: postgis/postgis
    container_name: postgis
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5 

  # Backend reverse proxy & frontend file server
  caddy:
    image: caddy:2-alpine
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy_data:/data
      - frontend-build:/app/client/build
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped

volumes:
  caddy_data: {}
  frontend-build: {}
  watershed_data: {}

