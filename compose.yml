# DEVELOPMENT COMPOSE CONFIG
services:
  # React client application
  client:
    # Build from Dockerfile in the client directory
    build:
      context: ./client
    ports:
      - "5173:5173"
    volumes:
      - /app/client/node_modules # Allow container to manage its own dependencies
      - .:/app
    working_dir: /app/client
    environment:
      - NODE_ENV=${NODE_ENV}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    # Enable HMR websocket connections
    command: npm run dev -- --host

  # GeoDjango web application
  server:
    # Build from the Dockerfile in the server directory
    build:
      context: ./server
      target: development
    # Host to container port mapping
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PW=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DEBUG}
    # Volume mount
    volumes:
      - .:/app
      - watershed_data:/app/server/server/watershed/data
    entrypoint: ["/entrypoint.sh"]
    command: python manage.py runserver 0.0.0.0:8000
    # Keep container active and interactive
    tty: true
    stdin_open: true
    depends_on:
      db:
        condition: service_healthy

  # Data downloader service - downloads watershed data files
  data-downloader:
    build:
      context: ./server
      dockerfile: Dockerfile.data-downloader
    volumes:
      - watershed_data:/data
    environment:
      - DATA_OUTPUT_DIR=/data
    profiles:
      - data-management

  # PostgreSQL database with PostGIS
  db:
    # Build based on latest offical image 
    # (https://registry.hub.docker.com/r/postgis/postgis/)
    image: postgis/postgis
    container_name: postgis
    ports:
      - "5432:5432"
    # More info on PostgreSQL container environment variables
    # (https://github.com/docker-library/docs/blob/master/postgres/README.md)
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Database management tool
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    # More info on pgAdmin container environment variables
    # (https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html)
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
      # Add server configuration as JSON
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
    ports:
      - "5050:80"
    volumes:
    # Mount the server configuration file
    - ./pgadmin-servers.json:/pgadmin4/servers.json
  
volumes:
  watershed_data: {}  